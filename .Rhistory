labs(color = "individual") +
facet_wrap(~date)
min(sifaka.1hz$gps.dop)-0.
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.25) +
geom_smooth(aes(x = time, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
ggtitle("DOP over time (1Hz GPS)") +
coord_cartesian(ylim = c((min(sifaka.1hz$gps.dop)-0.2),quantile(sifaka.1hz$gps.dop, 0.999))) +
labs(color = "individual") +
facet_wrap(~date)
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0) +
geom_smooth(aes(x = time, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
ggtitle("DOP over time (1Hz GPS)") +
coord_cartesian(ylim = c((min(sifaka.1hz$gps.dop)-0.2),quantile(sifaka.1hz$gps.dop, 0.999))) +
labs(color = "individual") +
facet_wrap(~date)
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = time, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
ggtitle("DOP over time (1Hz GPS)") +
coord_cartesian(ylim = c((min(sifaka.1hz$gps.dop)-0.2),quantile(sifaka.1hz$gps.dop, 0.999))) +
labs(color = "individual") +
facet_wrap(~date)
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = time, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(min(sifaka.1hz$eobs.horizontal.accuracy.estimate),quantile(sifaka.1hz$eobs.horizontal.accuracy.estimate, 0.999))) +
ggtitle("Horizontal accuracy estimate over time (1Hz GPS)") +
labs(color = "individual") +
facet_wrap(~date)
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = time, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c((min(sifaka.1hz$eobs.horizontal.accuracy.estimate)-0.1),quantile(sifaka.1hz$eobs.horizontal.accuracy.estimate, 0.999))) +
ggtitle("Horizontal accuracy estimate over time (1Hz GPS)") +
labs(color = "individual") +
facet_wrap(~date)
ggplot(sifaka.norm) +
geom_jitter(aes(x = study.local.timestamp, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = study.local.timestamp, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(min(sifaka.norm$eobs.horizontal.accuracy.estimate),quantile(sifaka.norm$eobs.horizontal.accuracy.estimate, 0.99))) +
ggtitle("Horizontal accuracy estimate over time (normal GPS)") +
xlab("time") +
labs(color = "individual")
ggplot(sifaka.norm) +
geom_jitter(aes(x = study.local.timestamp, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0.1, height = 0.1) +
geom_smooth(aes(x = study.local.timestamp, y = eobs.horizontal.accuracy.estimate, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(min(sifaka.norm$eobs.horizontal.accuracy.estimate),quantile(sifaka.norm$eobs.horizontal.accuracy.estimate, 0.99))) +
ggtitle("Horizontal accuracy estimate over time (normal GPS)") +
xlab("time") +
labs(color = "individual")
hist(sifaka.norm$gps.dop, breaks = 17, xlim = c(0,16), xlab = "DOP", main = "Histogram for DOP (normal GPS)")
ggplot(sifaka.norm) +
geom_jitter(aes(x = study.local.timestamp, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0.1, height = 0.1) +
geom_smooth(aes(x = study.local.timestamp, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(min(sifaka.norm$gps.dop),quantile(sifaka.norm$gps.dop, 0.99))) +
ggtitle("DOP over time (normal GPS)")+
xlab("time") +
labs(color = "individual")
ggplot(sifaka.norm) +
geom_jitter(aes(x = study.local.timestamp, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0.1, height = 0.2) +
geom_smooth(aes(x = study.local.timestamp, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(min(sifaka.norm$gps.dop),quantile(sifaka.norm$gps.dop, 0.99))) +
ggtitle("DOP over time (normal GPS)")+
xlab("time") +
labs(color = "individual")
ggplot(rbind(filter(sifaka.all, fix_pos <= 20), filter(testwalks, fix_pos <= 20))) +
geom_jitter(aes(x = fix_pos, y = eobs.horizontal.accuracy.estimate), alpha = 0.2, size = 0.5, width = 0.1, height = 0.2) +
geom_smooth(aes(x = fix_pos, y = eobs.horizontal.accuracy.estimate), method = "gam", formula = y ~ s(x)) +
theme_classic() +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(1,16)) +
theme(plot.title = element_text(face = "bold"), legend.position = "none") +
xlab("Burst length")
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = height.above.ground, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = time, y = height.above.ground, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
coord_cartesian(ylim = c(quantile(sifaka.1hz$height.above.ground, 0.001),quantile(sifaka.1hz$height.above.ground, 0.999))) +
facet_wrap(~as.factor(date)) +
ggtitle("Height over time in 1Hz data")
ggplot(sifaka.1hz) +
geom_jitter(data = sifaka.1hz[sample(1:nrow(sifaka.1hz), 5000, replace = F),], aes(x = time, y = gps.dop, color = individual.local.identifier), alpha = 0.2, size = 0.5, width = 0, height = 0.1) +
geom_smooth(aes(x = time, y = gps.dop, color = individual.local.identifier)) +
theme_classic() +
theme(plot.title = element_text(face = "bold")) +
scale_color_hue(direction = -1) +
ggtitle("DOP over time (1Hz GPS)") +
coord_cartesian(ylim = c((min(sifaka.1hz$gps.dop)-0.1),quantile(sifaka.1hz$gps.dop, 0.999))) +
labs(color = "individual") +
facet_wrap(~date)
library(hyenadata)
devtools::install_github(“DomArchive/DomArchive”, build_vignettes = TRUE)
devtools::install_github("DomArchive/DomArchive", build_vignettes = TRUE)
devtools::install_github("DomArchive/DomArchive", build_vignettes = TRUE)
devtools::install_github("DomArchive/DomArchive", build_vignettes = TRUE)
setwd('/Volumes/EAS_shared/sifaka_fossa/working/rawdata/DukeLemurCenter2021/')
list.dirs()
setwd('/Volumes/EAS_shared/sifaka_fossa/working/rawdata/DukeLemurCenter2021/ObsData/')
list.dirs()
list.dirs(recursive = FALSE)
dirs <- list.dirs(recursive = FALSE)
date.dirs <- list.dirs(recursive = FALSE)
dd = date.dirs[1]
dd
animal.dirs <- list.dirs(dd)
animal.dirs
animal.dirs <- list.dirs(dd, recursive = FALSE)
animal.dirs
strsplit(animal.dirs, split = '_')
animal.dirs <- list.dirs(dd, recursive = FALSE)
ad = animal.dirs[1]
animal.name <- strsplit(ad, split = '_')[1]
strsplit(ad, split = '_')[1]
strsplit(strsplit(ad, split = '_obs'), split = '/')
strsplit(strsplit(ad, split = '_obs'[[1]]), split = '/')
strsplit(strsplit(ad, split = '_obs'[[1]]), split = '//')
strsplit(ad, split = '_obs'[[1]])
strsplit(strsplit(ad, split = '_obs')[[1]], split = '//')
strsplit(strsplit(ad, split = '_obs')[[1]], split = '/')
split.dir.name <- strsplit(strsplit(ad, split = '_obs')[[1]], split = '/')
split.dir.name[[1]][3]
split.dir.name[[2]][1]
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
list.files(ad)
list.files(ad)[grepl(list.files(ad), 'MP4')]
list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
vf <- video.files[1]
vf
substr(vf, 3, 4)
substr(vf, 5, 8)
if(!require(devtools)) {install.packages("devtools")}
library(exiftoolr)
devtools::install_github("JoshOBrien/exiftoolr")
configure_exiftool()
library(exiftoolr)
configure_exiftool()
exiftoolr::configure_exiftool()
library(exiftoolr)
exiftoolr::configure_exiftool()
configure_exiftoolr()
paste(dd,ad,vf, sep = '/')
paste(ad,vf, sep = '/')
exiftoolr::exif_read(paste(ad,vf, sep = '/'))
date <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date
gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '-')
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
chapter <- substr(vf, 3, 4)
video.num <- substr(vf, 5, 8)
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
new.video.name
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
split.dir.name <- strsplit(strsplit(ad, split = '_')[[1]], split = '/')
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
for(dd in date.dirs){
animal.dirs <- list.dirs(dd, recursive = FALSE)
for(ad in animal.dirs){
split.dir.name <- strsplit(strsplit(ad, split = '_')[[1]], split = '/')
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
for(vf in video.files){
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
print(new.video.name)
}
}
}
destination.dir <- '/Volumes/EAS_shared/sifaka_fossa/working/processed/DukeLemurCenter2021/GoProVideos/'
cmnd <- paste0('mv', paste(ad,vf, sep = '/'), paste0(destination.dir, new.video.name))
cmnd
cmnd <- paste0('mv', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
cmnd
cmnd <- paste0('mv', ' ', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
cmnd
system(command = cmnd)
vf
vf
video.num
new.video.name
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
new.video.name
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
cmnd <- paste0('cp', ' ', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
system(command = cmnd)
setwd('/Volumes/EAS_shared/sifaka_fossa/working/processed/ObsData/')
library(exiftoolr)
configure_exiftoolr()
date.dirs <- list.dirs(recursive = FALSE)
destination.dir <- '/Volumes/EAS_shared/sifaka_fossa/working/processed/GoProVideos/'
for(dd in date.dirs){
animal.dirs <- list.dirs(dd, recursive = FALSE)
for(ad in animal.dirs){
split.dir.name <- strsplit(strsplit(ad, split = '_')[[1]], split = '/')
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
for(vf in video.files){
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
print(new.video.name)
# cmnd <- paste0('mv', ' ', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
# system(command = cmnd)
}
}
}
if(!require(devtools)) {install.packages("devtools")}
devtools::install_github("JoshOBrien/exiftoolr")
setwd('/Volumes/EAS_shared/sifaka_fossa/working/processed/ObsData/')
library(exiftoolr)
configure_exiftoolr()
date.dirs <- list.dirs(recursive = FALSE)
destination.dir <- '/Volumes/EAS_shared/sifaka_fossa/working/processed/GoProVideos/'
for(dd in date.dirs){
animal.dirs <- list.dirs(dd, recursive = FALSE)
for(ad in animal.dirs){
split.dir.name <- strsplit(strsplit(ad, split = '_')[[1]], split = '/')
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
for(vf in video.files){
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
print(new.video.name)
cmnd <- paste0('mv', ' ', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
system(command = cmnd)
}
}
}
exiftoolr::exif_read(vf)
exiftoolr::exif_read(paste(ad,vf, sep = '/'))
for(dd in date.dirs){
animal.dirs <- list.dirs(dd, recursive = FALSE)
for(ad in animal.dirs){
split.dir.name <- strsplit(strsplit(ad, split = '_')[[1]], split = '/')
animal <- split.dir.name[[1]][3]
observer <- split.dir.name[[2]][1]
video.files <- list.files(ad)[grepl(x = list.files(ad), pattern = 'MP4')]
for(vf in video.files){
chapter <- paste0('c',substr(vf, 3, 4))
video.num <- paste0('v',substr(vf, 5, 8))
date.time <- exiftoolr::exif_read(paste(ad,vf, sep = '/'))$CreateDate
date <- gsub(x = substr(date.time, 1, 10), pattern = ':', replacement = '')
time <- gsub(x = substr(date.time, 12, 19), pattern = ':', replacement = '')
new.video.name <- paste0(paste(animal, date, time, video.num, chapter, observer, sep = '_'), '.MP4')
print(new.video.name)
cmnd <- paste0('mv', ' ', paste(ad,vf, sep = '/'), ' ', paste0(destination.dir, new.video.name))
system(command = cmnd)
}
}
}
?dbinom
#Load libraries
install.packages(c("coda","mvtnorm","devtools","dagitty"))
install.packages(c("backports", "bayestestR", "blob", "broom", "bslib", "cachem", "cli", "cpp11", "crayon", "credentials", "desc", "DHARMa", "diffobj", "digest", "effectsize", "emmeans", "gargle", "generics", "gert", "ggeffects", "glmmTMB", "googledrive", "googlesheets4", "haven", "hms", "htmltools", "httpuv", "insight", "isoband", "knitr", "later", "lifecycle", "lubridate", "mime", "nloptr", "openssl", "parameters", "pbapply", "performance", "pillar", "pkgload", "R6", "rcmdcheck", "Rcpp", "readr", "remotes", "reprex", "rlang", "rmarkdown", "robustbase", "roxygen2", "rvest", "see", "sessioninfo", "shiny", "sjPlot", "stringi", "testthat", "TH.data", "tibble", "tidyr", "tinytex", "TMB", "usethis", "utf8", "uuid", "viridis", "waldo", "xfun"))
install.packages("gert")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
file.edit("~/.Renviron")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan") # observe startup messages
library("rstan")
options(mc.cores = parallel::detectCores()).
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
devtools::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
devtools::install_github("rmcelreath/rethinking")
?dbinom
```
# define grid
p_grid <- seq(from = 0, to = 1, length.out = 20)
# define prior
prior <- rep(1, 20)
# compute likelihood at each value in grid
likelihood <- dbinom(3, size = 3, prob = p_grid)
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
```
(2) W, W, W, L
```
p_grid <- seq(from = 0, to = 1, length.out = 20)     # define grid
prior <- rep(1, 20)     # define prior
likelihood <- dbinom(3, size = 4, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
(3) L, W, W, L, W, W, W
```
p_grid <- seq(from = 0, to = 1, length.out = 20)     # define grid
prior <- rep(1, 20)     # define prior
likelihood <- dbinom(5, size = 7, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
## 2M2. Now assume a prior for p that is equal to zero when p < 0.5 and is a positive constant when p ≥ 0.5. Again compute and plot the grid approximate posterior distribution for each of the sets of observations in the problem just above.
```
p_grid <- seq(from = 0, to = 1, length.out = 20)     # define grid
prior <- ifelse (p_grid < 0.5, 0, 1)
```
(1) W, W, W
```
likelihood <- dbinom(3, size = 3, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
(2) W, W, W, L
```
likelihood <- dbinom(3, size = 4, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
(3) L, W, W, L, W, W, W
```
likelihood <- dbinom(5, size = 7, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
## 2M2. Now assume a prior for p that is equal to zero when p < 0.5 and is a positive constant when p ≥ 0.5. Again compute and plot the grid approximate posterior distribution for each of the sets of observations in the problem just above.
```
p_grid <- seq(from = 0, to = 1, length.out = 20)     # define grid
prior <- ifelse (p_grid < 0.5, 0, 0.9)
```
(1) W, W, W
```
likelihood <- dbinom(3, size = 3, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
(2) W, W, W, L
```
likelihood <- dbinom(3, size = 4, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
(3) L, W, W, L, W, W, W
```
likelihood <- dbinom(5, size = 7, prob = p_grid)     # compute likelihood at each value in grid
unstd.posterior <- likelihood * prior     # compute product of likelihood and prior
posterior <- unstd.posterior / sum(unstd.posterior)     # standardize the posterior, so it sums to 1
plot(p_grid, posterior, type = "b", xlab = "probability of water", ylab = "posterior probability")
```
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("rethinking")
knitr::opts_chunk$set(echo = TRUE)
p_grid <- seq(from = 0, to = 1, length.out = 20)     # define grid
prior <- rep(1, 20)     # define prior
library(hyenadata)
data("tblFecalRepository")
View(tblFecalRepository)
library(hyenadata)
data("tblAggression")
summary(tblAggression)
######################################################################
##### 23.0 Food-related mobbing models #####
######################################################################
########## 23.1 Set working directory & download packages/tables ##########
rm(list = ls())
setwd("~/Documents/R/LionHyena")
options(stringsAsFactors = FALSE)
library(GGally)
library(glmmTMB)
library(MuMIn)
library(multcomp)
library(DHARMa)
library(see)
library(performance)
library(viridis)
library(sjPlot)
library(patchwork)
library(tidyverse)
hyenadata::update_tables("1.2.88")
library(hyenadata)
load("22.food_mobs.Rdata")
#Function glht : https://cran.r-project.org/web/packages/glmmTMB/vignettes/model_evaluation.html
glht_glmmTMB <- function (model, ..., component="cond") {
glht(model, ...,
coef. = function(x) fixef(x)[[component]],
vcov. = function(x) vcov(x)[[component]],
df = NULL)
}
#Set plot colors using viridis
viridis_2 <- viridis(7)[-c(1,3,5,6,7)]
viridis_3 <- viridis(7)[-c(2,4,6,7)]
summary(sessions.food$carc_cat)
######################################################################
##### 23.0 Food-related mobbing models #####
######################################################################
########## 23.1 Set working directory & download packages/tables ##########
rm(list = ls())
setwd("~/Documents/R/LionHyena")
options(stringsAsFactors = FALSE)
library(GGally)
library(glmmTMB)
library(MuMIn)
library(multcomp)
library(DHARMa)
library(see)
library(performance)
library(viridis)
library(sjPlot)
library(patchwork)
library(tidyverse)
hyenadata::update_tables("1.2.88")
library(hyenadata)
load("22.food_mobs.Rdata")
#Function glht : https://cran.r-project.org/web/packages/glmmTMB/vignettes/model_evaluation.html
glht_glmmTMB <- function (model, ..., component="cond") {
glht(model, ...,
coef. = function(x) fixef(x)[[component]],
vcov. = function(x) vcov(x)[[component]],
df = NULL)
}
#Set plot colors using viridis
viridis_2 <- viridis(7)[-c(1,3,5,6,7)]
viridis_3 <- viridis(7)[-c(2,4,6,7)]
nrow(filter(sessions.food, carc_cat == "l"))
nrow(filter(sessions.food, carc_cat == "m"))
nrow(filter(sessions.food, carc_cat == "l"))
nrow(filter(sessions.food, carc_cat == "xl"))
nrow(filter(sessions.food, carc_cat == "m" & mobbing = T))     #35
nrow(filter(sessions.food, carc_cat == "m" & mobbing == T))     #35
nrow(filter(sessions.food, carc_cat == "l" & mobbing == T))     #131
nrow(filter(sessions.food, carc_cat == "xl" & mobbing == T))     #15
library(hyenadata)
data("tblPreyCensus")
View(tblPreyCensus)
summary(tblPreyCensus$clan)
summary(as.factor(tblPreyCensus$clan))
